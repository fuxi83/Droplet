================================================================================
 Droplet - Toolkit for Liquid Art Photographer
================================================================================
Title:		Release Notes
Version:	2.0.0
Date:		2018/07/03
Author:		Stefan Brenner
--------------------------------------------------------------------------------


Droplet is an Open Source Toolkit for Liquid Art Photographers.



================================================================================
 T O D O S
================================================================================

 NEW
------------------------
- use launch4j (http://launch4j.sourceforge.net/)
- check new features in updated libraries
- maven version up
- better version management
- read version from properties file (see https://stackoverflow.com/questions/3697449/retrieve-version-from-maven-pom-xml-in-code)
- use maven and/or ant for build process


 VERY HIGH
------------------------


 HIGH
------------------------
- use micro seconds
- problems with data send and arduino uno/nano
- be careful with arduino files to exist in correct directory
- Simple Logging of photo number combined with the current configuration
- correct dsc-protocol.txt
- Logging of exceptions/errors/informations/...
- use jGoodies Forms and Validation


 NORMAL
------------------------
- Configuration for IDropletMessageProtocol (implements send/start/stop/rounds/delay/...)
  to show or hide ui controls
- create sexy icons
- build installers
- disable start button as long as the execution is running
- enable cancel button only if execution is running


 LOW
------------------------
- Fix UI Layout Issues
- Analyse Heap Dump with lots of devices and actions
- Exception handling for RxTx



================================================================================
 I D E A S
================================================================================
- load config from image
- load images to preview or show navigation to select previous images
- save comments to a saved configuration
- direct device control: send OFF to all that are ON when closing
- Disable Serial Communication Actions if No Connection is established
- Only fire association changed event if object was added/removed?
- Set Description per valve
- Mark Device Type with Icons
- Sensors
	- Sensor Setup Panel
	- SensorAction starts when sensor fires (with offset and/or duration)
- Setup Flashes without valves
- Empty valves (all, single, combination)
- Processing:
	o links for metadata edit:
		- http://www.adobe.com/devnet/xmp.html
		- http://sourceforge.net/projects/im4java/
		- http://www.sno.phy.queensu.ca/~phil/exiftool/
		- http://code.google.com/p/metadata-extractor/
	o embed the setup information in some kind of 'code' to EXIF
	o Output folder
	  	Camera -> watch folder -> Droplet -> watch folder -> Lightroom
	  	vs.
	  	Camera -> watch folder -> Droplet -> distribution folder -> Lightroom
	o create special droplet schema
	o create LR plugin for droplet metadata schema
		- http://www.adobe.com/devnet/photoshoplightroom.html

		XMP DropletDevice Struct
		--------------------------------------------------------------------------
		Title					string
		Type					string				i.e. valve, flash, camera, ...
		DropletActions			DropletAction+		--> DropletAction Struct


		XMP DropletAction Struct
		--------------------------------------------------------------------------
		Offset					integer				Time offset in ms from start
		Duration				integer				Duration of action in ms


		<rdf:Bag>
			<rdf:li>
				<drp:device
					drp:type="Valve">
					<rdf:Seq>
						<rdf:li>
							<drp:action offset=0 duration=20 />
						</rdf:li>
						<rdf:li>
							<drp:action offset=50 duration=30 />
						</rdf:li>
						<rdf:li>
							<drp:action offset=100 duration=50 />
						</rdf:li>
						...
					</rdf:Seq>
				</drp:device>
			</rdf:li>
			...
		</rdf:Bag>
- Logging:
	o Move logging to own window?
	o Add colored logging messages
	o Make logging level editable
	o log comments, times, setup, ... per session into file
- Internationalize Messages from Arduino
- Make language configurable
- Tabbed View (Setup, Shooting, Finish/Clean)
- make devices moveable
- Create own Spinner for easier round delay input
- Drag&Drop Device Panels and Actions
- Open/Close Panels
- Create Custom L&F with Synth or Nimbus
- Dark Nimbus color theme
- Graphical View of one cycle
- Automatic Action Times:
	o Offset + Duration = min. Offset of the following Action
- Viscosity Factor:
	o Factor that adapts the action times of devices





### RELEASE
1. Announce the release process Very important. As I said, you don’t release on a whim. Make sure 
   everyone on your team knows a release is pending and has all their stuff pushed to the development 
   branch that needs to be included.
2. Branch the development branch into a release branch. Following git-flow rules, I make a 
   release branch 1.0.
3. Update the POM version of the development branch. Update the version to the next 
   release version. For example mvn versions:set -DnewVersion=2.0-SNAPSHOT. Commit and push. 
   Now you can put resources developing towards the next release version.
4. Update the POM version of the release branch. Update the version to the standard CR version. 
   For example mvn versions:set -DnewVersion=1.0.CR-SNAPSHOT. Commit and push.
5. Run tests on the release branch. Run all the tests. If one or more fail, fix them first.
6. Create a candidate release from the release branch.
	- Use the Maven version plugin to update your POM’s versions. For example 
	  mvn versions:set -DnewVersion=1.0.CR1. Commit and push.
	- Make a tag on git.
	- Use the Maven version plugin to update your POM’s versions back to the standard 
	  CR version. For example mvn versions:set -DnewVersion=1.0.CR-SNAPSHOT.
	- Commit and push.
	- Checkout the new tag.
	- Do a deployment build (mvn clean deploy). Since you’ve just run your tests and fixed any 
	  failing ones, this shouldn’t fail.
	- Put deployment on QA environment.
7. Iterate until QA gives a green light on the candidate release.
	1. Fix bugs. Fix bugs reported on the CR releases on the release branch. Merge into 
	   development branch on regular intervals (or even better, continuous). Run tests 
	   continuously, making bug reports on failures and fixing them as you go.
	2. Create a candidate release.
		- Use the Maven version plugin to update your POM’s versions. For example 
		  mvn versions:set -DnewVersion=1.0.CRx. Commit and push.
		- Make a tag on git.
		- Use the Maven version plugin to update your POM’s versions back to the 
		  standard CR version. For example mvn versions:set -DnewVersion=1.0.CR-SNAPSHOT.
		- Commit and push.
		- Checkout the new tag.
		- Do a deployment build (mvn clean deploy). Since you’ve run your tests 
		  continuously, this shouldn’t fail.
		- Put deployment on QA environment.
8. Once QA has signed off on the release, create a final release.
	- Check whether there are no new commits since the last release tag (if there are, 
	  slap developers as they have done stuff that wasn’t needed or asked for).
	- Use the Maven version plugin to update your POM’s versions. For example 
	  mvn versions:set -DnewVersion=1.0. Commit and push.
	- Tag the release branch.
	- Merge into the master branch.
	- Checkout the master branch.
	- Do a deployment build (mvn clean deploy).
	- Start production release and deployment process (in most companies, not a 
	  small feat). This can involve building the site and doing other stuff, 
	  some not even Maven related.






==EOF===========================================================================